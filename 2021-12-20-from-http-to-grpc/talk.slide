# 从 HTTP 到 gRPC
即刻后端 gRPC 落地分享
20 Dec 2021

QianyuPan
panqianyu@iftech.io

## 背景

手写 HTTP Client 实现:

- 类型不可靠，无法保证 Client 端和 Server 端使用一致的数据类型
- 类型不安全
  - 可能错误地返回额外的字段
  - 无法保证字段不为空
- 无法兼顾多语言，每种语言都要实现一遍

**一致性得不到保证**

## Protobuf IDL

.code ./assets/user.proto

**Single source of truth, 一次定义到处使用**

## 通过 Protobuf 生成代码

.image ./assets/ci.svg 500 _
.caption Single source of truth, 全栈生成

## 三步走逐渐引入 gRPC

## 步骤一

使用 protobuf 生成 HTTP Client，并上线，确保各种类型定义没有问题。

.image ./assets/step1.svg _ 800

## 步骤二

上线 gRPC server，并使用 grpc-gateway 代理 HTTP 流量到 gRPC server。

.image ./assets/step2.svg _ 800

## 步骤三

在 Client 侧将 HTTP Client 内部替换为 gRPC。

.image ./assets/step3.svg _ 800

## Protobuf 仓库

.code ./assets/repotree.txt

## 强大的基础数据类型

| Protobuf                  | JSON            | TypeScript    | Go         |
| ------------------------- | --------------- | ------------- | ---------- |
| int32                     | number          | number        | int32      |
| int64                     | string          | string        | int64      |
| google.protobuf.Timestamp | string(RFC3999) | Date          | time       |
| google.protobuf.Value     | any             | any           | any        |
| google.protobuf.BoolValue | boolean         | boolean?      | *bool      |
| map\<K,V\>                | object          | Record\<K,V\> | map\<K,V\> |
| repeat V                  | array           | Array\<V\>    | []V        |

参考: <https://developers.google.com/protocol-buffers/docs/proto3#json>

: Protobuf 提供了强大的基础数据类型，这里展示了一些比较特殊的数据类型。

## 不支持复杂类型

## 可选类型

在 ProtoBuf 3.35 开始，重新引入了 optional 类型，可以替代空值安全(Wrapper)的类型。

## 当前的开发流程

```mermaid
graph TD
B[协商接口] --> C[编写 IDL 并生成代码]
C -->D[实现 Server 端]
C -->E[在代码中使用 Client]
D -->F[联调]
E -->F
```

## 一个基于 gRPC 的开发流程

```mermaid
graph TD
B[协商接口] --> C[编写 IDL 并生成代码]
C -->D[实现 Server 端]
C -->E[在代码中使用 Client]
D -->F[联调]
E -->F
```

## 上线 gRPC

## 服务发现

## grpc + xDS

: 最近 gRPC 逐步引入了在服务网格当中通行的 xDS 协议
: 不需要通过 sidecar 反向代理负载均衡，自身就能够获取下游服务列表实现负载均衡
: 相比 sidecar 方案，能够获得非常大的性能提升

## 熔断降级

## 参考链接

[]
[深入了解 gRPC：协议](https://pingcap.com/zh/blog/grpc)
