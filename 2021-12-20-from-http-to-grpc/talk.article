# 从 HTTP 到 gRPC
即刻后端 gRPC 落地分享
20 Dec 2021

QianyuPan
panqianyu@iftech.io

## 背景

在很长的一段时间里面，我们的 RPC 都是编写在 Client 端单独编写 HTTP Client。
问题:
- 类型不可靠，无法保证 Client 端和 Server 端使用一致的数据类型
- 类型不安全
  - 可能错误地返回额外的字段
  - 无法保证字段不为空
- 无法兼顾多语言，每种语言都要实现一遍

## 引入 ProtoBuf IDL

### 通用且丰富的类型系统

.code ./assets/type.proto

参考: <https://developers.google.com/protocol-buffers/docs/proto3#json>

: Protobuf 提供了强大的基础数据类型，这里展示了一些比较特殊的数据类型。

### 安全一致的类型


### 灵活地定义服务接口

.code ./assets/service.proto

在一个 rpc 上同时定义 HTTP 和 gRPC 两套接口：
- grpc `/DemoService/UpdateOne`
- post `/internals/updateOne`

### 通过 ProtoBuf 生成 Client 和 Server

.image ./assets/ci.svg 500 _
.caption Single source of truth

## 部署 gRPC

### grpc-gateway

.image https://repository-images.githubusercontent.com/33352201/4b6f5b80-b2a1-11eb-90c9-2e45f036ff26 _ 600

为了将线上服务流量平滑迁移到 gRPC，在一开始需要为 gRPC 服务挂载 gateway，将接收到的 HTTP 的流量转换为对 gRPC 服务的调用。

### 步骤一

使用 protobuf 生成 HTTP Client，并上线，确保各种类型定义没有问题。

.image ./assets/step1.svg _ 600

### 步骤二

上线 gRPC server，并使用 grpc-gateway 代理 HTTP 流量到 gRPC server。

.image ./assets/step2.svg _ 600

### 步骤三

在 Client 侧将 HTTP Client 内部替换为 gRPC。

.image ./assets/step3.svg _ 600

### 分流 HTTP 请求

因为很多服务不单单通过 HTTP 提供 RPC 接口，还需要提供给前端调用，没办法直接让 grpc-gateway 接管请求。

## 基于 Istio 的服务治理

### 负载均衡

因为 HTTP2 连接复用，一般情况下 gRPC client 不需要引入 Connection Pool，只需要与目标服务建立一个 TCP 连接就够了。

所以必须要 Sidecar 来代理流量实现负载均衡。

.image ./assets/lb2.svg _ 600

### 熔断降级

使用 Sidecar 基于路由完成熔断，不再需要在 RPC Client 内嵌 Circuit Breaker。

.image ./assets/degrade.svg _ 600

### 题外话: xDS

在 gRPC client 端直接集成 Envoy 的 xDS 协议，实现无 Sidecar 的服务发现和负载均衡。

.image https://cloudnative.to/blog/grpc-proxyless-service-mesh/008i3skNly1gwp512szlvj31260rgq57.jpg _ 500
.caption https://cloudnative.to/blog/grpc-proxyless-service-mesh/
.caption (对比黄色和红色) 在高并发场景下，比 Envoy 代理模式，网络延迟大幅度降低

: 最近 gRPC 逐步引入了在服务网格当中通行的 xDS 协议
: 不需要通过 sidecar 反向代理负载均衡，自身就能够获取下游服务列表实现负载均衡
: 相比 sidecar 方案，能够获得非常大的性能提升
: 不过由于目前比比较依赖 Sidecar，先不做迁移

## 更小开销

## 高效协作

.image ./assets/dev_process.svg

## 调试

由于 ProtoBuf 需要严格编码，需要必须要使用和服务端一致的 proto 作为本地调试的 schema。



## 总结

- Pros
  - 一致的强类型定义
  - 跨语言的 Server 和 Client 代码生成
  - ProtoBuf + HTTP2 更好的性能表现
  - 更加高效的开发流程
- Cons
  - 引入更多复杂度
  - 调试比较困难

## 当前进展

1. 目前即刻已支持为 Java/Node/Go 生成 gRPC client/server 和 HTTP Client 了，保证新业务可以无痛地上马 gRPC，并且无需再使用 grpc-gateway。
2. 数个线上既有服务已经完成 gRPC 改造，可以同时接收 gRPC 和 HTTP 流量。

## 参考链接

[深入了解 gRPC：协议](https://pingcap.com/zh/blog/grpc)
